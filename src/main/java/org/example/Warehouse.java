package org.example;

import java.io.*;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;


public class Warehouse {

        private final Map<Product, Integer> stock = new HashMap<>();
        Cash cash = new Cash();

        public void loadFromFile(String filename) {
            Path path = Paths.get(filename);

            if(!Files.exists(path)) {
                System.out.println("–§–∞–π–ª —Å–∫–ª–∞–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π.");
                return;
            }

            try (BufferedReader reader = Files.newBufferedReader(path, StandardCharsets.UTF_8)) {
                String line;
                int lineNo = 0;
                stock.clear();

                while((line = reader.readLine()) != null) {
                    lineNo++;
                    line = line.trim();

                    if(line.isEmpty() || line.startsWith("#")) {
                        continue;
                    }

                    String[] parts = line.split(";");
                    if(parts.length != 3) {
                        System.out.printf("‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ %d –ø—Ä–æ–ø—É—â–µ–Ω–∞: –æ–∂–∏–¥–∞—é 3 –∫–æ–ª–æ–Ω–∫–∏%n", lineNo);
                        continue;
                    }
                    String name = parts[0].trim();
                    String priceStr = parts[1].trim();
                    String quantityStr = parts[2].trim();

                    double price;
                    int quantity;

                    try {
                        price = Double.parseDouble(priceStr);
                    } catch (NumberFormatException e) {
                        price = Double.parseDouble(priceStr.replace(",", "."));
                    }
                    try {
                        quantity = Integer.parseInt(quantityStr);
                    } catch (NumberFormatException e) {
                        System.out.printf("‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ %d –ø—Ä–æ–ø—É—â–µ–Ω–∞: –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ '%s'%n", lineNo, quantityStr);
                        continue;
                    }
                    addProduct(name, price, quantity);
                }
                System.out.println("‚úÖ –°–∫–ª–∞–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞.");
            } catch (IOException e) {
                System.out.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∫–ª–∞–¥–∞: " + e.getMessage());
            }
        }

        public void saveToFile(String filename) {
            try (PrintWriter writer = new PrintWriter(Files.newBufferedWriter(
                    Paths.get(filename), StandardCharsets.UTF_8))) {
                for (Map.Entry<Product, Integer> entry : stock.entrySet()) {
                    writer.printf(Locale.US,"%s;%.2f;%d%n",
                            entry.getKey().getName(),
                            entry.getKey().getPrice(),
                            entry.getValue());
                }
                System.out.println("üíæ –°–∫–ª–∞–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª.");
            } catch (IOException e) {
                System.out.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–∫–ª–∞–¥–∞: " + e.getMessage());
            }
        }



        public Product findProduct(String name) {
            for(Map.Entry<Product, Integer> entry : stock.entrySet()) {
                if(name.equalsIgnoreCase(entry.getKey().getName())) {
                    return entry.getKey();
                }
            }
            throw new ProductNotFoundException("–¢–æ–≤–∞—Ä '" + name + "' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–∫–ª–∞–¥–µ!");
        }

        public void addProduct(String name, double price, int quantity) {
            if(quantity<=0 || price <0) {
                throw new IllegalArgumentException("–¶–µ–Ω–∞ –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è!");
            }
            Product product = new Product(name, price);

            stock.put(product, stock.getOrDefault(product, 0) + quantity);
        }

        public void printInventory() {
            System.out.println("\nüì¶ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∫–ª–∞–¥–∞:");
            for(Map.Entry<Product, Integer> entry : stock.entrySet()) {
                double totalForItem = entry.getKey().getPrice() * entry.getValue();
                System.out.printf("%s ‚Äî %d —à—Ç. –ø–æ %.2f —Ä—É–±. (–í—Å–µ–≥–æ: %.2f —Ä—É–±.)%n",
                        entry.getKey().getName(),
                        entry.getValue(),
                        entry.getKey().getPrice(),
                        totalForItem);
            }
            System.out.printf("üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: %.2f —Ä—É–±.%n", getTotalValue());
        }

        public double getTotalValue() {
            double sum = 0;
            for(Map.Entry<Product, Integer> entry : stock.entrySet()) {
                sum += entry.getKey().getPrice() * entry.getValue();
            }
            return sum;
        }

        public void sellProduct(String name, int quantity, int discount) {

            Product product = findProduct(name);
            int currentQuantity = stock.get(product);

            if (quantity <= 0) {
                throw new IllegalArgumentException("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è!");
            }
            if (currentQuantity < quantity) {
                throw new NotEnoughProductException("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ '" + name + "' –Ω–∞ —Å–∫–ª–∞–¥–µ!");
            }

            stock.put(product, currentQuantity - quantity);

            double totalPrice = cash.applyDiscount(product.getPrice(), discount) * quantity;
            System.out.printf("‚úÖ –ü—Ä–æ–¥–∞–Ω–æ %d —à—Ç. %s –∑–∞ %.2f —Ä—É–±.%n",
                    quantity, product.getName(), totalPrice);

            if (stock.get(product) == 0) {
                stock.remove(product);
                System.out.println("‚ö†Ô∏è –¢–æ–≤–∞—Ä '" + product.getName() + "' –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –Ω–∞ —Å–∫–ª–∞–¥–µ.");
            }
        }

}
